/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export declare namespace IAuction {
  export type AuctionStruct = {
    tokenId: PromiseOrValue<BigNumberish>
    highestBid: PromiseOrValue<BigNumberish>
    highestBidder: PromiseOrValue<string>
    startTime: PromiseOrValue<BigNumberish>
    endTime: PromiseOrValue<BigNumberish>
    settled: PromiseOrValue<boolean>
  }

  export type AuctionStructOutput = [
    BigNumber,
    BigNumber,
    string,
    number,
    number,
    boolean
  ] & {
    tokenId: BigNumber
    highestBid: BigNumber
    highestBidder: string
    startTime: number
    endTime: number
    settled: boolean
  }

  export type HouseStruct = {
    treasury: PromiseOrValue<string>
    duration: PromiseOrValue<BigNumberish>
    timeBuffer: PromiseOrValue<BigNumberish>
    minBidIncrementPercentage: PromiseOrValue<BigNumberish>
    reservePrice: PromiseOrValue<BigNumberish>
  }

  export type HouseStructOutput = [string, number, number, number, BigNumber] & {
    treasury: string
    duration: number
    timeBuffer: number
    minBidIncrementPercentage: number
    reservePrice: BigNumber
  }
}

export interface IAuctionInterface extends utils.Interface {
  functions: {
    'auction()': FunctionFragment
    'createBid(uint256)': FunctionFragment
    'house()': FunctionFragment
    'initialize(address,address,address,uint256,uint256)': FunctionFragment
    'owner()': FunctionFragment
    'pause()': FunctionFragment
    'paused()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setMinBidIncrementPercentage(uint256)': FunctionFragment
    'setReservePrice(uint256)': FunctionFragment
    'setTimeBuffer(uint256)': FunctionFragment
    'settleAuction()': FunctionFragment
    'settleCurrentAndCreateNewAuction()': FunctionFragment
    'token()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unpause()': FunctionFragment
    'upgradeTo(address)': FunctionFragment
    'upgradeToAndCall(address,bytes)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'auction'
      | 'createBid'
      | 'house'
      | 'initialize'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'renounceOwnership'
      | 'setMinBidIncrementPercentage'
      | 'setReservePrice'
      | 'setTimeBuffer'
      | 'settleAuction'
      | 'settleCurrentAndCreateNewAuction'
      | 'token'
      | 'transferOwnership'
      | 'unpause'
      | 'upgradeTo'
      | 'upgradeToAndCall'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'auction', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'createBid',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'house', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'setMinBidIncrementPercentage',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'setReservePrice',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'setTimeBuffer',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'settleAuction', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'settleCurrentAndCreateNewAuction',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'token', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'upgradeTo',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string

  decodeFunctionResult(functionFragment: 'auction', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'createBid', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'house', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setMinBidIncrementPercentage',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setReservePrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setTimeBuffer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'settleAuction', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'settleCurrentAndCreateNewAuction',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result

  events: {}
}

export interface IAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: IAuctionInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    auction(overrides?: CallOverrides): Promise<[IAuction.AuctionStructOutput]>

    createBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    house(overrides?: CallOverrides): Promise<[IAuction.HouseStructOutput]>

    initialize(
      token: PromiseOrValue<string>,
      foundersDAO: PromiseOrValue<string>,
      treasury: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    owner(overrides?: CallOverrides): Promise<[string]>

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setMinBidIncrementPercentage(
      minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setReservePrice(
      reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setTimeBuffer(
      timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    settleAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    settleCurrentAndCreateNewAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    token(overrides?: CallOverrides): Promise<[string]>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    upgradeTo(
      implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    upgradeToAndCall(
      implementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  auction(overrides?: CallOverrides): Promise<IAuction.AuctionStructOutput>

  createBid(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  house(overrides?: CallOverrides): Promise<IAuction.HouseStructOutput>

  initialize(
    token: PromiseOrValue<string>,
    foundersDAO: PromiseOrValue<string>,
    treasury: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    reservePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  owner(overrides?: CallOverrides): Promise<string>

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setMinBidIncrementPercentage(
    minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setReservePrice(
    reservePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setTimeBuffer(
    timeBuffer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  settleAuction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  settleCurrentAndCreateNewAuction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  token(overrides?: CallOverrides): Promise<string>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  upgradeTo(
    implementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  upgradeToAndCall(
    implementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    auction(overrides?: CallOverrides): Promise<IAuction.AuctionStructOutput>

    createBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    house(overrides?: CallOverrides): Promise<IAuction.HouseStructOutput>

    initialize(
      token: PromiseOrValue<string>,
      foundersDAO: PromiseOrValue<string>,
      treasury: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    owner(overrides?: CallOverrides): Promise<string>

    pause(overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    setMinBidIncrementPercentage(
      minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    setReservePrice(
      reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    setTimeBuffer(
      timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    settleAuction(overrides?: CallOverrides): Promise<void>

    settleCurrentAndCreateNewAuction(overrides?: CallOverrides): Promise<void>

    token(overrides?: CallOverrides): Promise<string>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    unpause(overrides?: CallOverrides): Promise<void>

    upgradeTo(
      implementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    upgradeToAndCall(
      implementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {}

  estimateGas: {
    auction(overrides?: CallOverrides): Promise<BigNumber>

    createBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    house(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      token: PromiseOrValue<string>,
      foundersDAO: PromiseOrValue<string>,
      treasury: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setMinBidIncrementPercentage(
      minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setReservePrice(
      reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setTimeBuffer(
      timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    settleAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    settleCurrentAndCreateNewAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    upgradeTo(
      implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    upgradeToAndCall(
      implementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    auction(overrides?: CallOverrides): Promise<PopulatedTransaction>

    createBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    house(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      token: PromiseOrValue<string>,
      foundersDAO: PromiseOrValue<string>,
      treasury: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setMinBidIncrementPercentage(
      minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setReservePrice(
      reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setTimeBuffer(
      timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    settleAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    settleCurrentAndCreateNewAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    upgradeTo(
      implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    upgradeToAndCall(
      implementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
