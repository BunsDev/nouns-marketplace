/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export declare namespace IMetadataRenderer {
  export type ItemParamStruct = {
    propertyId: PromiseOrValue<BigNumberish>
    name: PromiseOrValue<string>
    isNewProperty: PromiseOrValue<boolean>
  }

  export type ItemParamStructOutput = [BigNumber, string, boolean] & {
    propertyId: BigNumber
    name: string
    isNewProperty: boolean
  }

  export type IPFSGroupStruct = {
    baseUri: PromiseOrValue<string>
    extension: PromiseOrValue<string>
  }

  export type IPFSGroupStructOutput = [string, string] & {
    baseUri: string
    extension: string
  }
}

export interface MetadataRendererInterface extends utils.Interface {
  functions: {
    'addProperties(string[],(uint256,string,bool)[],(string,string))': FunctionFragment
    'contractURI()': FunctionFragment
    'generate(uint256)': FunctionFragment
    'getProperties(uint256)': FunctionFragment
    'initialize(address,string,string,string,string)': FunctionFragment
    'itemsCount(uint256)': FunctionFragment
    'owner()': FunctionFragment
    'propertiesCount()': FunctionFragment
    'proxiableUUID()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'token()': FunctionFragment
    'tokenURI(uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'updateDescription(string)': FunctionFragment
    'upgradeTo(address)': FunctionFragment
    'upgradeToAndCall(address,bytes)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'addProperties'
      | 'contractURI'
      | 'generate'
      | 'getProperties'
      | 'initialize'
      | 'itemsCount'
      | 'owner'
      | 'propertiesCount'
      | 'proxiableUUID'
      | 'renounceOwnership'
      | 'token'
      | 'tokenURI'
      | 'transferOwnership'
      | 'updateDescription'
      | 'upgradeTo'
      | 'upgradeToAndCall'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'addProperties',
    values: [
      PromiseOrValue<string>[],
      IMetadataRenderer.ItemParamStruct[],
      IMetadataRenderer.IPFSGroupStruct
    ]
  ): string
  encodeFunctionData(functionFragment: 'contractURI', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'generate',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getProperties',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'itemsCount',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'propertiesCount', values?: undefined): string
  encodeFunctionData(functionFragment: 'proxiableUUID', values?: undefined): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(functionFragment: 'token', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'tokenURI',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'updateDescription',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'upgradeTo',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string

  decodeFunctionResult(functionFragment: 'addProperties', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'contractURI', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'generate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getProperties', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'itemsCount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'propertiesCount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'proxiableUUID', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateDescription', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result

  events: {
    'AdminChanged(address,address)': EventFragment
    'BeaconUpgraded(address)': EventFragment
    'DescriptionUpdated(string)': EventFragment
    'Initialized(uint8)': EventFragment
    'ItemAdded(uint256,uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'PropertyAdded(uint256,string)': EventFragment
    'Upgraded(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DescriptionUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ItemAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PropertyAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment
}

export interface AdminChangedEventObject {
  previousAdmin: string
  newAdmin: string
}
export type AdminChangedEvent = TypedEvent<[string, string], AdminChangedEventObject>

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>

export interface BeaconUpgradedEventObject {
  beacon: string
}
export type BeaconUpgradedEvent = TypedEvent<[string], BeaconUpgradedEventObject>

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>

export interface DescriptionUpdatedEventObject {
  arg0: string
}
export type DescriptionUpdatedEvent = TypedEvent<[string], DescriptionUpdatedEventObject>

export type DescriptionUpdatedEventFilter = TypedEventFilter<DescriptionUpdatedEvent>

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface ItemAddedEventObject {
  propertyId: BigNumber
  itemIndex: BigNumber
}
export type ItemAddedEvent = TypedEvent<[BigNumber, BigNumber], ItemAddedEventObject>

export type ItemAddedEventFilter = TypedEventFilter<ItemAddedEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PropertyAddedEventObject {
  id: BigNumber
  name: string
}
export type PropertyAddedEvent = TypedEvent<[BigNumber, string], PropertyAddedEventObject>

export type PropertyAddedEventFilter = TypedEventFilter<PropertyAddedEvent>

export interface UpgradedEventObject {
  implementation: string
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>

export interface MetadataRenderer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: MetadataRendererInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    addProperties(
      _names: PromiseOrValue<string>[],
      _items: IMetadataRenderer.ItemParamStruct[],
      _ipfsGroup: IMetadataRenderer.IPFSGroupStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    contractURI(overrides?: CallOverrides): Promise<[string]>

    generate(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getProperties(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { aryAttributes: string; queryString: string }>

    initialize(
      _foundersDAO: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _contractImage: PromiseOrValue<string>,
      _rendererBase: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    itemsCount(
      _propertyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    owner(overrides?: CallOverrides): Promise<[string]>

    propertiesCount(overrides?: CallOverrides): Promise<[BigNumber]>

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    token(overrides?: CallOverrides): Promise<[string]>

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    updateDescription(
      newDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  addProperties(
    _names: PromiseOrValue<string>[],
    _items: IMetadataRenderer.ItemParamStruct[],
    _ipfsGroup: IMetadataRenderer.IPFSGroupStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  contractURI(overrides?: CallOverrides): Promise<string>

  generate(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  getProperties(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { aryAttributes: string; queryString: string }>

  initialize(
    _foundersDAO: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    _contractImage: PromiseOrValue<string>,
    _rendererBase: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  itemsCount(
    _propertyId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  owner(overrides?: CallOverrides): Promise<string>

  propertiesCount(overrides?: CallOverrides): Promise<BigNumber>

  proxiableUUID(overrides?: CallOverrides): Promise<string>

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  token(overrides?: CallOverrides): Promise<string>

  tokenURI(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>

  transferOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  updateDescription(
    newDescription: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    addProperties(
      _names: PromiseOrValue<string>[],
      _items: IMetadataRenderer.ItemParamStruct[],
      _ipfsGroup: IMetadataRenderer.IPFSGroupStruct,
      overrides?: CallOverrides
    ): Promise<void>

    contractURI(overrides?: CallOverrides): Promise<string>

    generate(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    getProperties(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { aryAttributes: string; queryString: string }>

    initialize(
      _foundersDAO: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _contractImage: PromiseOrValue<string>,
      _rendererBase: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    itemsCount(
      _propertyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>

    propertiesCount(overrides?: CallOverrides): Promise<BigNumber>

    proxiableUUID(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    token(overrides?: CallOverrides): Promise<string>

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    updateDescription(
      newDescription: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    'AdminChanged(address,address)'(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter

    'BeaconUpgraded(address)'(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter
    BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter

    'DescriptionUpdated(string)'(arg0?: null): DescriptionUpdatedEventFilter
    DescriptionUpdated(arg0?: null): DescriptionUpdatedEventFilter

    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'ItemAdded(uint256,uint256)'(
      propertyId?: null,
      itemIndex?: null
    ): ItemAddedEventFilter
    ItemAdded(propertyId?: null, itemIndex?: null): ItemAddedEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter

    'PropertyAdded(uint256,string)'(id?: null, name?: null): PropertyAddedEventFilter
    PropertyAdded(id?: null, name?: null): PropertyAddedEventFilter

    'Upgraded(address)'(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter
    Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter
  }

  estimateGas: {
    addProperties(
      _names: PromiseOrValue<string>[],
      _items: IMetadataRenderer.ItemParamStruct[],
      _ipfsGroup: IMetadataRenderer.IPFSGroupStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    contractURI(overrides?: CallOverrides): Promise<BigNumber>

    generate(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    getProperties(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initialize(
      _foundersDAO: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _contractImage: PromiseOrValue<string>,
      _rendererBase: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    itemsCount(
      _propertyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    propertiesCount(overrides?: CallOverrides): Promise<BigNumber>

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<BigNumber>

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    updateDescription(
      newDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    addProperties(
      _names: PromiseOrValue<string>[],
      _items: IMetadataRenderer.ItemParamStruct[],
      _ipfsGroup: IMetadataRenderer.IPFSGroupStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>

    generate(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    getProperties(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    initialize(
      _foundersDAO: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _contractImage: PromiseOrValue<string>,
      _rendererBase: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    itemsCount(
      _propertyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    propertiesCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    updateDescription(
      newDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
