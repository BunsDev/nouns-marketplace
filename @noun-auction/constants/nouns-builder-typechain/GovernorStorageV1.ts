/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export interface GovernorStorageV1Interface extends utils.Interface {
  functions: {
    'govMeta()': FunctionFragment
  }

  getFunction(nameOrSignatureOrTopic: 'govMeta'): FunctionFragment

  encodeFunctionData(functionFragment: 'govMeta', values?: undefined): string

  decodeFunctionResult(functionFragment: 'govMeta', data: BytesLike): Result

  events: {}
}

export interface GovernorStorageV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: GovernorStorageV1Interface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    govMeta(overrides?: CallOverrides): Promise<
      [string, number, number, number, number] & {
        token: string
        votingDelay: number
        votingPeriod: number
        proposalThresholdBPS: number
        quorumVotesBPS: number
      }
    >
  }

  govMeta(overrides?: CallOverrides): Promise<
    [string, number, number, number, number] & {
      token: string
      votingDelay: number
      votingPeriod: number
      proposalThresholdBPS: number
      quorumVotesBPS: number
    }
  >

  callStatic: {
    govMeta(overrides?: CallOverrides): Promise<
      [string, number, number, number, number] & {
        token: string
        votingDelay: number
        votingPeriod: number
        proposalThresholdBPS: number
        quorumVotesBPS: number
      }
    >
  }

  filters: {}

  estimateGas: {
    govMeta(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    govMeta(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
