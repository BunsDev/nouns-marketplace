/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export interface UpgradeManagerInterface extends utils.Interface {
  functions: {
    'isValidUpgrade(address,address)': FunctionFragment
    'registerUpgrade(address,address)': FunctionFragment
    'registrar()': FunctionFragment
    'setRegistrar(address)': FunctionFragment
    'unregisterUpgrade(address,address)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'isValidUpgrade'
      | 'registerUpgrade'
      | 'registrar'
      | 'setRegistrar'
      | 'unregisterUpgrade'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'isValidUpgrade',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'registerUpgrade',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'registrar', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'setRegistrar',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'unregisterUpgrade',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string

  decodeFunctionResult(functionFragment: 'isValidUpgrade', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'registerUpgrade', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'registrar', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setRegistrar', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unregisterUpgrade', data: BytesLike): Result

  events: {
    'RegistrarUpdated(address)': EventFragment
    'UpgradeRegistered(address,address)': EventFragment
    'UpgradeUnregistered(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'RegistrarUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpgradeRegistered'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpgradeUnregistered'): EventFragment
}

export interface RegistrarUpdatedEventObject {
  registrar: string
}
export type RegistrarUpdatedEvent = TypedEvent<[string], RegistrarUpdatedEventObject>

export type RegistrarUpdatedEventFilter = TypedEventFilter<RegistrarUpdatedEvent>

export interface UpgradeRegisteredEventObject {
  prevImpl: string
  newImpl: string
}
export type UpgradeRegisteredEvent = TypedEvent<
  [string, string],
  UpgradeRegisteredEventObject
>

export type UpgradeRegisteredEventFilter = TypedEventFilter<UpgradeRegisteredEvent>

export interface UpgradeUnregisteredEventObject {
  prevImpl: string
  newImpl: string
}
export type UpgradeUnregisteredEvent = TypedEvent<
  [string, string],
  UpgradeUnregisteredEventObject
>

export type UpgradeUnregisteredEventFilter = TypedEventFilter<UpgradeUnregisteredEvent>

export interface UpgradeManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: UpgradeManagerInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    isValidUpgrade(
      _prevImpl: PromiseOrValue<string>,
      _newImpl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    registerUpgrade(
      _prevImpl: PromiseOrValue<string>,
      _newImpl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    registrar(overrides?: CallOverrides): Promise<[string]>

    setRegistrar(
      _registrar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    unregisterUpgrade(
      _prevImpl: PromiseOrValue<string>,
      _newImpl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  isValidUpgrade(
    _prevImpl: PromiseOrValue<string>,
    _newImpl: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>

  registerUpgrade(
    _prevImpl: PromiseOrValue<string>,
    _newImpl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  registrar(overrides?: CallOverrides): Promise<string>

  setRegistrar(
    _registrar: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  unregisterUpgrade(
    _prevImpl: PromiseOrValue<string>,
    _newImpl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    isValidUpgrade(
      _prevImpl: PromiseOrValue<string>,
      _newImpl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>

    registerUpgrade(
      _prevImpl: PromiseOrValue<string>,
      _newImpl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    registrar(overrides?: CallOverrides): Promise<string>

    setRegistrar(
      _registrar: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    unregisterUpgrade(
      _prevImpl: PromiseOrValue<string>,
      _newImpl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    'RegistrarUpdated(address)'(registrar?: null): RegistrarUpdatedEventFilter
    RegistrarUpdated(registrar?: null): RegistrarUpdatedEventFilter

    'UpgradeRegistered(address,address)'(
      prevImpl?: null,
      newImpl?: null
    ): UpgradeRegisteredEventFilter
    UpgradeRegistered(prevImpl?: null, newImpl?: null): UpgradeRegisteredEventFilter

    'UpgradeUnregistered(address,address)'(
      prevImpl?: null,
      newImpl?: null
    ): UpgradeUnregisteredEventFilter
    UpgradeUnregistered(prevImpl?: null, newImpl?: null): UpgradeUnregisteredEventFilter
  }

  estimateGas: {
    isValidUpgrade(
      _prevImpl: PromiseOrValue<string>,
      _newImpl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    registerUpgrade(
      _prevImpl: PromiseOrValue<string>,
      _newImpl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    registrar(overrides?: CallOverrides): Promise<BigNumber>

    setRegistrar(
      _registrar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    unregisterUpgrade(
      _prevImpl: PromiseOrValue<string>,
      _newImpl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    isValidUpgrade(
      _prevImpl: PromiseOrValue<string>,
      _newImpl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    registerUpgrade(
      _prevImpl: PromiseOrValue<string>,
      _newImpl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    registrar(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setRegistrar(
      _registrar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    unregisterUpgrade(
      _prevImpl: PromiseOrValue<string>,
      _newImpl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
