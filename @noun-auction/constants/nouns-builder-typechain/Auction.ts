/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export interface AuctionInterface extends utils.Interface {
  functions: {
    'auction()': FunctionFragment
    'createBid(uint256)': FunctionFragment
    'house()': FunctionFragment
    'initialize(address,address,address,uint256,uint256)': FunctionFragment
    'owner()': FunctionFragment
    'pause()': FunctionFragment
    'paused()': FunctionFragment
    'proxiableUUID()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setDuration(uint256)': FunctionFragment
    'setMinBidIncrementPercentage(uint256)': FunctionFragment
    'setReservePrice(uint256)': FunctionFragment
    'setTimeBuffer(uint256)': FunctionFragment
    'settleAuction()': FunctionFragment
    'settleCurrentAndCreateNewAuction()': FunctionFragment
    'token()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unpause()': FunctionFragment
    'upgradeTo(address)': FunctionFragment
    'upgradeToAndCall(address,bytes)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'auction'
      | 'createBid'
      | 'house'
      | 'initialize'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'proxiableUUID'
      | 'renounceOwnership'
      | 'setDuration'
      | 'setMinBidIncrementPercentage'
      | 'setReservePrice'
      | 'setTimeBuffer'
      | 'settleAuction'
      | 'settleCurrentAndCreateNewAuction'
      | 'token'
      | 'transferOwnership'
      | 'unpause'
      | 'upgradeTo'
      | 'upgradeToAndCall'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'auction', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'createBid',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'house', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(functionFragment: 'proxiableUUID', values?: undefined): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'setDuration',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'setMinBidIncrementPercentage',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'setReservePrice',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'setTimeBuffer',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'settleAuction', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'settleCurrentAndCreateNewAuction',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'token', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'upgradeTo',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string

  decodeFunctionResult(functionFragment: 'auction', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'createBid', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'house', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'proxiableUUID', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setDuration', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setMinBidIncrementPercentage',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setReservePrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setTimeBuffer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'settleAuction', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'settleCurrentAndCreateNewAuction',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'upgradeToAndCall', data: BytesLike): Result

  events: {
    'AdminChanged(address,address)': EventFragment
    'AuctionBid(uint256,address,uint256,bool,uint256)': EventFragment
    'AuctionCreated(uint256,uint256,uint256)': EventFragment
    'AuctionSettled(uint256,address,uint256)': EventFragment
    'BeaconUpgraded(address)': EventFragment
    'DurationUpdated(uint256)': EventFragment
    'Initialized(uint8)': EventFragment
    'MinBidIncrementPercentageUpdated(uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Paused(address)': EventFragment
    'ReservePriceUpdated(uint256)': EventFragment
    'TimeBufferUpdated(uint256)': EventFragment
    'Unpaused(address)': EventFragment
    'Upgraded(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'AuctionBid'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'AuctionCreated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'AuctionSettled'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DurationUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'MinBidIncrementPercentageUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ReservePriceUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TimeBufferUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment
}

export interface AdminChangedEventObject {
  previousAdmin: string
  newAdmin: string
}
export type AdminChangedEvent = TypedEvent<[string, string], AdminChangedEventObject>

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>

export interface AuctionBidEventObject {
  tokenId: BigNumber
  sender: string
  value: BigNumber
  extended: boolean
  endTime: BigNumber
}
export type AuctionBidEvent = TypedEvent<
  [BigNumber, string, BigNumber, boolean, BigNumber],
  AuctionBidEventObject
>

export type AuctionBidEventFilter = TypedEventFilter<AuctionBidEvent>

export interface AuctionCreatedEventObject {
  tokenId: BigNumber
  startTime: BigNumber
  endTime: BigNumber
}
export type AuctionCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  AuctionCreatedEventObject
>

export type AuctionCreatedEventFilter = TypedEventFilter<AuctionCreatedEvent>

export interface AuctionSettledEventObject {
  tokenId: BigNumber
  winner: string
  amount: BigNumber
}
export type AuctionSettledEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  AuctionSettledEventObject
>

export type AuctionSettledEventFilter = TypedEventFilter<AuctionSettledEvent>

export interface BeaconUpgradedEventObject {
  beacon: string
}
export type BeaconUpgradedEvent = TypedEvent<[string], BeaconUpgradedEventObject>

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>

export interface DurationUpdatedEventObject {
  duration: BigNumber
}
export type DurationUpdatedEvent = TypedEvent<[BigNumber], DurationUpdatedEventObject>

export type DurationUpdatedEventFilter = TypedEventFilter<DurationUpdatedEvent>

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface MinBidIncrementPercentageUpdatedEventObject {
  minBidIncrementPercentage: BigNumber
}
export type MinBidIncrementPercentageUpdatedEvent = TypedEvent<
  [BigNumber],
  MinBidIncrementPercentageUpdatedEventObject
>

export type MinBidIncrementPercentageUpdatedEventFilter =
  TypedEventFilter<MinBidIncrementPercentageUpdatedEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PausedEventObject {
  account: string
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export interface ReservePriceUpdatedEventObject {
  reservePrice: BigNumber
}
export type ReservePriceUpdatedEvent = TypedEvent<
  [BigNumber],
  ReservePriceUpdatedEventObject
>

export type ReservePriceUpdatedEventFilter = TypedEventFilter<ReservePriceUpdatedEvent>

export interface TimeBufferUpdatedEventObject {
  timeBuffer: BigNumber
}
export type TimeBufferUpdatedEvent = TypedEvent<[BigNumber], TimeBufferUpdatedEventObject>

export type TimeBufferUpdatedEventFilter = TypedEventFilter<TimeBufferUpdatedEvent>

export interface UnpausedEventObject {
  account: string
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export interface UpgradedEventObject {
  implementation: string
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>

export interface Auction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: AuctionInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    auction(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, string, number, number, boolean] & {
        tokenId: BigNumber
        highestBid: BigNumber
        highestBidder: string
        startTime: number
        endTime: number
        settled: boolean
      }
    >

    createBid(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    house(overrides?: CallOverrides): Promise<
      [string, number, number, number, BigNumber] & {
        treasury: string
        duration: number
        timeBuffer: number
        minBidIncrementPercentage: number
        reservePrice: BigNumber
      }
    >

    initialize(
      _token: PromiseOrValue<string>,
      _foundersDAO: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    owner(overrides?: CallOverrides): Promise<[string]>

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setDuration(
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setMinBidIncrementPercentage(
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setReservePrice(
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setTimeBuffer(
      _timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    settleAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    settleCurrentAndCreateNewAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    token(overrides?: CallOverrides): Promise<[string]>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  auction(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, string, number, number, boolean] & {
      tokenId: BigNumber
      highestBid: BigNumber
      highestBidder: string
      startTime: number
      endTime: number
      settled: boolean
    }
  >

  createBid(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  house(overrides?: CallOverrides): Promise<
    [string, number, number, number, BigNumber] & {
      treasury: string
      duration: number
      timeBuffer: number
      minBidIncrementPercentage: number
      reservePrice: BigNumber
    }
  >

  initialize(
    _token: PromiseOrValue<string>,
    _foundersDAO: PromiseOrValue<string>,
    _treasury: PromiseOrValue<string>,
    _duration: PromiseOrValue<BigNumberish>,
    _reservePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  owner(overrides?: CallOverrides): Promise<string>

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  proxiableUUID(overrides?: CallOverrides): Promise<string>

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setDuration(
    _duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setMinBidIncrementPercentage(
    _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setReservePrice(
    _reservePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setTimeBuffer(
    _timeBuffer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  settleAuction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  settleCurrentAndCreateNewAuction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  token(overrides?: CallOverrides): Promise<string>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    auction(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, string, number, number, boolean] & {
        tokenId: BigNumber
        highestBid: BigNumber
        highestBidder: string
        startTime: number
        endTime: number
        settled: boolean
      }
    >

    createBid(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    house(overrides?: CallOverrides): Promise<
      [string, number, number, number, BigNumber] & {
        treasury: string
        duration: number
        timeBuffer: number
        minBidIncrementPercentage: number
        reservePrice: BigNumber
      }
    >

    initialize(
      _token: PromiseOrValue<string>,
      _foundersDAO: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    owner(overrides?: CallOverrides): Promise<string>

    pause(overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    proxiableUUID(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    setDuration(
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    setMinBidIncrementPercentage(
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    setReservePrice(
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    setTimeBuffer(
      _timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    settleAuction(overrides?: CallOverrides): Promise<void>

    settleCurrentAndCreateNewAuction(overrides?: CallOverrides): Promise<void>

    token(overrides?: CallOverrides): Promise<string>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    unpause(overrides?: CallOverrides): Promise<void>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    'AdminChanged(address,address)'(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter
    AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter

    'AuctionBid(uint256,address,uint256,bool,uint256)'(
      tokenId?: null,
      sender?: null,
      value?: null,
      extended?: null,
      endTime?: null
    ): AuctionBidEventFilter
    AuctionBid(
      tokenId?: null,
      sender?: null,
      value?: null,
      extended?: null,
      endTime?: null
    ): AuctionBidEventFilter

    'AuctionCreated(uint256,uint256,uint256)'(
      tokenId?: null,
      startTime?: null,
      endTime?: null
    ): AuctionCreatedEventFilter
    AuctionCreated(
      tokenId?: null,
      startTime?: null,
      endTime?: null
    ): AuctionCreatedEventFilter

    'AuctionSettled(uint256,address,uint256)'(
      tokenId?: null,
      winner?: null,
      amount?: null
    ): AuctionSettledEventFilter
    AuctionSettled(
      tokenId?: null,
      winner?: null,
      amount?: null
    ): AuctionSettledEventFilter

    'BeaconUpgraded(address)'(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter
    BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter

    'DurationUpdated(uint256)'(duration?: null): DurationUpdatedEventFilter
    DurationUpdated(duration?: null): DurationUpdatedEventFilter

    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'MinBidIncrementPercentageUpdated(uint256)'(
      minBidIncrementPercentage?: null
    ): MinBidIncrementPercentageUpdatedEventFilter
    MinBidIncrementPercentageUpdated(
      minBidIncrementPercentage?: null
    ): MinBidIncrementPercentageUpdatedEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter

    'Paused(address)'(account?: null): PausedEventFilter
    Paused(account?: null): PausedEventFilter

    'ReservePriceUpdated(uint256)'(reservePrice?: null): ReservePriceUpdatedEventFilter
    ReservePriceUpdated(reservePrice?: null): ReservePriceUpdatedEventFilter

    'TimeBufferUpdated(uint256)'(timeBuffer?: null): TimeBufferUpdatedEventFilter
    TimeBufferUpdated(timeBuffer?: null): TimeBufferUpdatedEventFilter

    'Unpaused(address)'(account?: null): UnpausedEventFilter
    Unpaused(account?: null): UnpausedEventFilter

    'Upgraded(address)'(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter
    Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter
  }

  estimateGas: {
    auction(overrides?: CallOverrides): Promise<BigNumber>

    createBid(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    house(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _token: PromiseOrValue<string>,
      _foundersDAO: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setDuration(
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setMinBidIncrementPercentage(
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setReservePrice(
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setTimeBuffer(
      _timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    settleAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    settleCurrentAndCreateNewAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    auction(overrides?: CallOverrides): Promise<PopulatedTransaction>

    createBid(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    house(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      _token: PromiseOrValue<string>,
      _foundersDAO: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      _duration: PromiseOrValue<BigNumberish>,
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setDuration(
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setMinBidIncrementPercentage(
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setReservePrice(
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setTimeBuffer(
      _timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    settleAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    settleCurrentAndCreateNewAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
