/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export interface TokenStorageV1Interface extends utils.Interface {
  functions: {
    'auction()': FunctionFragment
    'founders()': FunctionFragment
    'metadataRenderer()': FunctionFragment
    'totalSupply()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic: 'auction' | 'founders' | 'metadataRenderer' | 'totalSupply'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'auction', values?: undefined): string
  encodeFunctionData(functionFragment: 'founders', values?: undefined): string
  encodeFunctionData(functionFragment: 'metadataRenderer', values?: undefined): string
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string

  decodeFunctionResult(functionFragment: 'auction', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'founders', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'metadataRenderer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result

  events: {}
}

export interface TokenStorageV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: TokenStorageV1Interface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    auction(overrides?: CallOverrides): Promise<[string]>

    founders(overrides?: CallOverrides): Promise<
      [string, number, number, number] & {
        DAO: string
        maxAllocation: number
        allocationFrequency: number
        currentAllocation: number
      }
    >

    metadataRenderer(overrides?: CallOverrides): Promise<[string]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>
  }

  auction(overrides?: CallOverrides): Promise<string>

  founders(overrides?: CallOverrides): Promise<
    [string, number, number, number] & {
      DAO: string
      maxAllocation: number
      allocationFrequency: number
      currentAllocation: number
    }
  >

  metadataRenderer(overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    auction(overrides?: CallOverrides): Promise<string>

    founders(overrides?: CallOverrides): Promise<
      [string, number, number, number] & {
        DAO: string
        maxAllocation: number
        allocationFrequency: number
        currentAllocation: number
      }
    >

    metadataRenderer(overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {}

  estimateGas: {
    auction(overrides?: CallOverrides): Promise<BigNumber>

    founders(overrides?: CallOverrides): Promise<BigNumber>

    metadataRenderer(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    auction(overrides?: CallOverrides): Promise<PopulatedTransaction>

    founders(overrides?: CallOverrides): Promise<PopulatedTransaction>

    metadataRenderer(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
