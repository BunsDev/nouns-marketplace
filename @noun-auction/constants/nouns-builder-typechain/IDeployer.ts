/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export declare namespace IDeployer {
  export type TokenParamsStruct = {
    initInfo: PromiseOrValue<BytesLike>
    foundersDAO: PromiseOrValue<string>
    foundersMaxAllocation: PromiseOrValue<BigNumberish>
    foundersAllocationFrequency: PromiseOrValue<BigNumberish>
  }

  export type TokenParamsStructOutput = [string, string, BigNumber, BigNumber] & {
    initInfo: string
    foundersDAO: string
    foundersMaxAllocation: BigNumber
    foundersAllocationFrequency: BigNumber
  }

  export type AuctionParamsStruct = {
    reservePrice: PromiseOrValue<BigNumberish>
    duration: PromiseOrValue<BigNumberish>
  }

  export type AuctionParamsStructOutput = [BigNumber, BigNumber] & {
    reservePrice: BigNumber
    duration: BigNumber
  }

  export type GovParamsStruct = {
    timelockDelay: PromiseOrValue<BigNumberish>
    votingDelay: PromiseOrValue<BigNumberish>
    votingPeriod: PromiseOrValue<BigNumberish>
    proposalThresholdBPS: PromiseOrValue<BigNumberish>
    quorumVotesBPS: PromiseOrValue<BigNumberish>
  }

  export type GovParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    timelockDelay: BigNumber
    votingDelay: BigNumber
    votingPeriod: BigNumber
    proposalThresholdBPS: BigNumber
    quorumVotesBPS: BigNumber
  }
}

export interface IDeployerInterface extends utils.Interface {
  functions: {
    'deploy((bytes,address,uint256,uint256),(uint256,uint256),(uint256,uint256,uint256,uint256,uint256))': FunctionFragment
  }

  getFunction(nameOrSignatureOrTopic: 'deploy'): FunctionFragment

  encodeFunctionData(
    functionFragment: 'deploy',
    values: [
      IDeployer.TokenParamsStruct,
      IDeployer.AuctionParamsStruct,
      IDeployer.GovParamsStruct
    ]
  ): string

  decodeFunctionResult(functionFragment: 'deploy', data: BytesLike): Result

  events: {}
}

export interface IDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: IDeployerInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    deploy(
      tokenParams: IDeployer.TokenParamsStruct,
      auctionParams: IDeployer.AuctionParamsStruct,
      govParams: IDeployer.GovParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  deploy(
    tokenParams: IDeployer.TokenParamsStruct,
    auctionParams: IDeployer.AuctionParamsStruct,
    govParams: IDeployer.GovParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    deploy(
      tokenParams: IDeployer.TokenParamsStruct,
      auctionParams: IDeployer.AuctionParamsStruct,
      govParams: IDeployer.GovParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        token: string
        auction: string
        treasury: string
        governor: string
      }
    >
  }

  filters: {}

  estimateGas: {
    deploy(
      tokenParams: IDeployer.TokenParamsStruct,
      auctionParams: IDeployer.AuctionParamsStruct,
      govParams: IDeployer.GovParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    deploy(
      tokenParams: IDeployer.TokenParamsStruct,
      auctionParams: IDeployer.AuctionParamsStruct,
      govParams: IDeployer.GovParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
