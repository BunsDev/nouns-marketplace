/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export interface AuctionStorageV1Interface extends utils.Interface {
  functions: {
    'auction()': FunctionFragment
    'house()': FunctionFragment
    'token()': FunctionFragment
  }

  getFunction(nameOrSignatureOrTopic: 'auction' | 'house' | 'token'): FunctionFragment

  encodeFunctionData(functionFragment: 'auction', values?: undefined): string
  encodeFunctionData(functionFragment: 'house', values?: undefined): string
  encodeFunctionData(functionFragment: 'token', values?: undefined): string

  decodeFunctionResult(functionFragment: 'auction', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'house', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result

  events: {}
}

export interface AuctionStorageV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: AuctionStorageV1Interface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    auction(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, string, number, number, boolean] & {
        tokenId: BigNumber
        highestBid: BigNumber
        highestBidder: string
        startTime: number
        endTime: number
        settled: boolean
      }
    >

    house(overrides?: CallOverrides): Promise<
      [string, number, number, number, BigNumber] & {
        treasury: string
        duration: number
        timeBuffer: number
        minBidIncrementPercentage: number
        reservePrice: BigNumber
      }
    >

    token(overrides?: CallOverrides): Promise<[string]>
  }

  auction(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, string, number, number, boolean] & {
      tokenId: BigNumber
      highestBid: BigNumber
      highestBidder: string
      startTime: number
      endTime: number
      settled: boolean
    }
  >

  house(overrides?: CallOverrides): Promise<
    [string, number, number, number, BigNumber] & {
      treasury: string
      duration: number
      timeBuffer: number
      minBidIncrementPercentage: number
      reservePrice: BigNumber
    }
  >

  token(overrides?: CallOverrides): Promise<string>

  callStatic: {
    auction(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, string, number, number, boolean] & {
        tokenId: BigNumber
        highestBid: BigNumber
        highestBidder: string
        startTime: number
        endTime: number
        settled: boolean
      }
    >

    house(overrides?: CallOverrides): Promise<
      [string, number, number, number, BigNumber] & {
        treasury: string
        duration: number
        timeBuffer: number
        minBidIncrementPercentage: number
        reservePrice: BigNumber
      }
    >

    token(overrides?: CallOverrides): Promise<string>
  }

  filters: {}

  estimateGas: {
    auction(overrides?: CallOverrides): Promise<BigNumber>

    house(overrides?: CallOverrides): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    auction(overrides?: CallOverrides): Promise<PopulatedTransaction>

    house(overrides?: CallOverrides): Promise<PopulatedTransaction>

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
