/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export declare namespace IMetadataRenderer {
  export type ItemParamStruct = {
    propertyId: PromiseOrValue<BigNumberish>
    name: PromiseOrValue<string>
    isNewProperty: PromiseOrValue<boolean>
  }

  export type ItemParamStructOutput = [BigNumber, string, boolean] & {
    propertyId: BigNumber
    name: string
    isNewProperty: boolean
  }

  export type IPFSGroupStruct = {
    baseUri: PromiseOrValue<string>
    extension: PromiseOrValue<string>
  }

  export type IPFSGroupStructOutput = [string, string] & {
    baseUri: string
    extension: string
  }
}

export interface IMetadataRendererInterface extends utils.Interface {
  functions: {
    'addProperties(string[],(uint256,string,bool)[],(string,string))': FunctionFragment
    'contractURI()': FunctionFragment
    'generate(uint256)': FunctionFragment
    'getProperties(uint256)': FunctionFragment
    'initialize(address,string,string,string,string)': FunctionFragment
    'itemsCount(uint256)': FunctionFragment
    'owner()': FunctionFragment
    'propertiesCount()': FunctionFragment
    'tokenURI(uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'addProperties'
      | 'contractURI'
      | 'generate'
      | 'getProperties'
      | 'initialize'
      | 'itemsCount'
      | 'owner'
      | 'propertiesCount'
      | 'tokenURI'
      | 'transferOwnership'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'addProperties',
    values: [
      PromiseOrValue<string>[],
      IMetadataRenderer.ItemParamStruct[],
      IMetadataRenderer.IPFSGroupStruct
    ]
  ): string
  encodeFunctionData(functionFragment: 'contractURI', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'generate',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getProperties',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'itemsCount',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'propertiesCount', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'tokenURI',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string

  decodeFunctionResult(functionFragment: 'addProperties', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'contractURI', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'generate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getProperties', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'itemsCount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'propertiesCount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result

  events: {}
}

export interface IMetadataRenderer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: IMetadataRendererInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    addProperties(
      names: PromiseOrValue<string>[],
      items: IMetadataRenderer.ItemParamStruct[],
      data: IMetadataRenderer.IPFSGroupStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    contractURI(overrides?: CallOverrides): Promise<[string]>

    generate(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getProperties(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { aryAttributes: string; queryString: string }>

    initialize(
      _foundersDAO: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _contractImage: PromiseOrValue<string>,
      _rendererBase: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    itemsCount(
      propertyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    owner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    propertiesCount(overrides?: CallOverrides): Promise<[BigNumber]>

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  addProperties(
    names: PromiseOrValue<string>[],
    items: IMetadataRenderer.ItemParamStruct[],
    data: IMetadataRenderer.IPFSGroupStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  contractURI(overrides?: CallOverrides): Promise<string>

  generate(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  getProperties(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { aryAttributes: string; queryString: string }>

  initialize(
    _foundersDAO: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    _contractImage: PromiseOrValue<string>,
    _rendererBase: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  itemsCount(
    propertyId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  owner(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  propertiesCount(overrides?: CallOverrides): Promise<BigNumber>

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    addProperties(
      names: PromiseOrValue<string>[],
      items: IMetadataRenderer.ItemParamStruct[],
      data: IMetadataRenderer.IPFSGroupStruct,
      overrides?: CallOverrides
    ): Promise<void>

    contractURI(overrides?: CallOverrides): Promise<string>

    generate(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    getProperties(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { aryAttributes: string; queryString: string }>

    initialize(
      _foundersDAO: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _contractImage: PromiseOrValue<string>,
      _rendererBase: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    itemsCount(
      propertyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>

    propertiesCount(overrides?: CallOverrides): Promise<BigNumber>

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {}

  estimateGas: {
    addProperties(
      names: PromiseOrValue<string>[],
      items: IMetadataRenderer.ItemParamStruct[],
      data: IMetadataRenderer.IPFSGroupStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    contractURI(overrides?: CallOverrides): Promise<BigNumber>

    generate(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    getProperties(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initialize(
      _foundersDAO: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _contractImage: PromiseOrValue<string>,
      _rendererBase: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    itemsCount(
      propertyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    propertiesCount(overrides?: CallOverrides): Promise<BigNumber>

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    addProperties(
      names: PromiseOrValue<string>[],
      items: IMetadataRenderer.ItemParamStruct[],
      data: IMetadataRenderer.IPFSGroupStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>

    generate(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    getProperties(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    initialize(
      _foundersDAO: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _contractImage: PromiseOrValue<string>,
      _rendererBase: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    itemsCount(
      propertyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    propertiesCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
