/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export declare namespace IDeployer {
  export type TokenParamsStruct = {
    initInfo: PromiseOrValue<BytesLike>
    foundersDAO: PromiseOrValue<string>
    foundersMaxAllocation: PromiseOrValue<BigNumberish>
    foundersAllocationFrequency: PromiseOrValue<BigNumberish>
  }

  export type TokenParamsStructOutput = [string, string, BigNumber, BigNumber] & {
    initInfo: string
    foundersDAO: string
    foundersMaxAllocation: BigNumber
    foundersAllocationFrequency: BigNumber
  }

  export type AuctionParamsStruct = {
    reservePrice: PromiseOrValue<BigNumberish>
    duration: PromiseOrValue<BigNumberish>
  }

  export type AuctionParamsStructOutput = [BigNumber, BigNumber] & {
    reservePrice: BigNumber
    duration: BigNumber
  }

  export type GovParamsStruct = {
    timelockDelay: PromiseOrValue<BigNumberish>
    votingDelay: PromiseOrValue<BigNumberish>
    votingPeriod: PromiseOrValue<BigNumberish>
    proposalThresholdBPS: PromiseOrValue<BigNumberish>
    quorumVotesBPS: PromiseOrValue<BigNumberish>
  }

  export type GovParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    timelockDelay: BigNumber
    votingDelay: BigNumber
    votingPeriod: BigNumber
    proposalThresholdBPS: BigNumber
    quorumVotesBPS: BigNumber
  }
}

export interface DeployerInterface extends utils.Interface {
  functions: {
    'auctionImpl()': FunctionFragment
    'deploy((bytes,address,uint256,uint256),(uint256,uint256),(uint256,uint256,uint256,uint256,uint256))': FunctionFragment
    'governorImpl()': FunctionFragment
    'tokenImpl()': FunctionFragment
    'treasuryImpl()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'auctionImpl'
      | 'deploy'
      | 'governorImpl'
      | 'tokenImpl'
      | 'treasuryImpl'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'auctionImpl', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'deploy',
    values: [
      IDeployer.TokenParamsStruct,
      IDeployer.AuctionParamsStruct,
      IDeployer.GovParamsStruct
    ]
  ): string
  encodeFunctionData(functionFragment: 'governorImpl', values?: undefined): string
  encodeFunctionData(functionFragment: 'tokenImpl', values?: undefined): string
  encodeFunctionData(functionFragment: 'treasuryImpl', values?: undefined): string

  decodeFunctionResult(functionFragment: 'auctionImpl', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deploy', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'governorImpl', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokenImpl', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'treasuryImpl', data: BytesLike): Result

  events: {
    'DAODeployed(address,address,address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'DAODeployed'): EventFragment
}

export interface DAODeployedEventObject {
  token: string
  auction: string
  treasury: string
  governor: string
}
export type DAODeployedEvent = TypedEvent<
  [string, string, string, string],
  DAODeployedEventObject
>

export type DAODeployedEventFilter = TypedEventFilter<DAODeployedEvent>

export interface Deployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: DeployerInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    auctionImpl(overrides?: CallOverrides): Promise<[string]>

    deploy(
      _tokenParams: IDeployer.TokenParamsStruct,
      _auctionParams: IDeployer.AuctionParamsStruct,
      _govParams: IDeployer.GovParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    governorImpl(overrides?: CallOverrides): Promise<[string]>

    tokenImpl(overrides?: CallOverrides): Promise<[string]>

    treasuryImpl(overrides?: CallOverrides): Promise<[string]>
  }

  auctionImpl(overrides?: CallOverrides): Promise<string>

  deploy(
    _tokenParams: IDeployer.TokenParamsStruct,
    _auctionParams: IDeployer.AuctionParamsStruct,
    _govParams: IDeployer.GovParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  governorImpl(overrides?: CallOverrides): Promise<string>

  tokenImpl(overrides?: CallOverrides): Promise<string>

  treasuryImpl(overrides?: CallOverrides): Promise<string>

  callStatic: {
    auctionImpl(overrides?: CallOverrides): Promise<string>

    deploy(
      _tokenParams: IDeployer.TokenParamsStruct,
      _auctionParams: IDeployer.AuctionParamsStruct,
      _govParams: IDeployer.GovParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        token: string
        auction: string
        treasury: string
        governor: string
      }
    >

    governorImpl(overrides?: CallOverrides): Promise<string>

    tokenImpl(overrides?: CallOverrides): Promise<string>

    treasuryImpl(overrides?: CallOverrides): Promise<string>
  }

  filters: {
    'DAODeployed(address,address,address,address)'(
      token?: null,
      auction?: null,
      treasury?: null,
      governor?: null
    ): DAODeployedEventFilter
    DAODeployed(
      token?: null,
      auction?: null,
      treasury?: null,
      governor?: null
    ): DAODeployedEventFilter
  }

  estimateGas: {
    auctionImpl(overrides?: CallOverrides): Promise<BigNumber>

    deploy(
      _tokenParams: IDeployer.TokenParamsStruct,
      _auctionParams: IDeployer.AuctionParamsStruct,
      _govParams: IDeployer.GovParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    governorImpl(overrides?: CallOverrides): Promise<BigNumber>

    tokenImpl(overrides?: CallOverrides): Promise<BigNumber>

    treasuryImpl(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    auctionImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>

    deploy(
      _tokenParams: IDeployer.TokenParamsStruct,
      _auctionParams: IDeployer.AuctionParamsStruct,
      _govParams: IDeployer.GovParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    governorImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokenImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>

    treasuryImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
