/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from 'ethers'
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from '@nomiclabs/hardhat-ethers/types'

import * as Contracts from '.'

declare module 'hardhat/types/runtime' {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: 'OwnableUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>
    getContractFactory(
      name: 'Initializable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>
    getContractFactory(
      name: 'PausableUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>
    getContractFactory(
      name: 'ReentrancyGuardUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>
    getContractFactory(
      name: 'ContextUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>
    getContractFactory(
      name: 'Ownable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>
    getContractFactory(
      name: 'IERC1822Proxiable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>
    getContractFactory(
      name: 'IBeacon',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>
    getContractFactory(
      name: 'ERC1967Proxy',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>
    getContractFactory(
      name: 'ERC1967Upgrade',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>
    getContractFactory(
      name: 'Proxy',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>
    getContractFactory(
      name: 'ProxyAdmin',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAdmin__factory>
    getContractFactory(
      name: 'TransparentUpgradeableProxy',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>
    getContractFactory(
      name: 'IERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>
    getContractFactory(
      name: 'IERC721Enumerable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>
    getContractFactory(
      name: 'IERC721Metadata',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>
    getContractFactory(
      name: 'IERC721',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>
    getContractFactory(
      name: 'IERC721Receiver',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>
    getContractFactory(
      name: 'ERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>
    getContractFactory(
      name: 'IERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>
    getContractFactory(
      name: 'ERC721',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>
    getContractFactory(
      name: 'ERC721Checkpointable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Checkpointable__factory>
    getContractFactory(
      name: 'ERC721Enumerable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>
    getContractFactory(
      name: 'IProxyRegistry',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProxyRegistry__factory>
    getContractFactory(
      name: 'NounsDAOExecutor',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOExecutor__factory>
    getContractFactory(
      name: 'INounsDAOExecutor',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INounsDAOExecutor__factory>
    getContractFactory(
      name: 'NounsDAOEvents',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOEvents__factory>
    getContractFactory(
      name: 'NounsDAOProxyStorage',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOProxyStorage__factory>
    getContractFactory(
      name: 'NounsDAOStorageV1',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOStorageV1__factory>
    getContractFactory(
      name: 'NounsTokenLike',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsTokenLike__factory>
    getContractFactory(
      name: 'NounsDAOLogicV1',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOLogicV1__factory>
    getContractFactory(
      name: 'NounsDAOProxy',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOProxy__factory>
    getContractFactory(
      name: 'INounsAuctionHouse',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INounsAuctionHouse__factory>
    getContractFactory(
      name: 'INounsDescriptor',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INounsDescriptor__factory>
    getContractFactory(
      name: 'INounsSeeder',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INounsSeeder__factory>
    getContractFactory(
      name: 'INounsToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INounsToken__factory>
    getContractFactory(
      name: 'IWETH',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>
    getContractFactory(
      name: 'NounsAuctionHouse',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsAuctionHouse__factory>
    getContractFactory(
      name: 'NounsDescriptor',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDescriptor__factory>
    getContractFactory(
      name: 'NounsSeeder',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsSeeder__factory>
    getContractFactory(
      name: 'NounsToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsToken__factory>
    getContractFactory(
      name: 'NounsAuctionHouseProxy',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsAuctionHouseProxy__factory>
    getContractFactory(
      name: 'NounsAuctionHouseProxyAdmin',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsAuctionHouseProxyAdmin__factory>
    getContractFactory(
      name: 'MaliciousBidder',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MaliciousBidder__factory>
    getContractFactory(
      name: 'Administered',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Administered__factory>
    getContractFactory(
      name: 'NounsDAOExecutorHarness',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOExecutorHarness__factory>
    getContractFactory(
      name: 'NounsDAOExecutorTest',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOExecutorTest__factory>
    getContractFactory(
      name: 'NounsDAOImmutable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOImmutable__factory>
    getContractFactory(
      name: 'NounsDAOLogicV1Harness',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NounsDAOLogicV1Harness__factory>
    getContractFactory(
      name: 'WETH',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH__factory>

    getContractAt(
      name: 'OwnableUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>
    getContractAt(
      name: 'Initializable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>
    getContractAt(
      name: 'PausableUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>
    getContractAt(
      name: 'ReentrancyGuardUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>
    getContractAt(
      name: 'ContextUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>
    getContractAt(
      name: 'Ownable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>
    getContractAt(
      name: 'IERC1822Proxiable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>
    getContractAt(
      name: 'IBeacon',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>
    getContractAt(
      name: 'ERC1967Proxy',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>
    getContractAt(
      name: 'ERC1967Upgrade',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>
    getContractAt(
      name: 'Proxy',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>
    getContractAt(
      name: 'ProxyAdmin',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyAdmin>
    getContractAt(
      name: 'TransparentUpgradeableProxy',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>
    getContractAt(
      name: 'IERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>
    getContractAt(
      name: 'IERC721Enumerable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>
    getContractAt(
      name: 'IERC721Metadata',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>
    getContractAt(
      name: 'IERC721',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>
    getContractAt(
      name: 'IERC721Receiver',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>
    getContractAt(
      name: 'ERC165',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>
    getContractAt(
      name: 'IERC165',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>
    getContractAt(
      name: 'ERC721',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>
    getContractAt(
      name: 'ERC721Checkpointable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Checkpointable>
    getContractAt(
      name: 'ERC721Enumerable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>
    getContractAt(
      name: 'IProxyRegistry',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProxyRegistry>
    getContractAt(
      name: 'NounsDAOExecutor',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOExecutor>
    getContractAt(
      name: 'INounsDAOExecutor',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INounsDAOExecutor>
    getContractAt(
      name: 'NounsDAOEvents',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOEvents>
    getContractAt(
      name: 'NounsDAOProxyStorage',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOProxyStorage>
    getContractAt(
      name: 'NounsDAOStorageV1',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOStorageV1>
    getContractAt(
      name: 'NounsTokenLike',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsTokenLike>
    getContractAt(
      name: 'NounsDAOLogicV1',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOLogicV1>
    getContractAt(
      name: 'NounsDAOProxy',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOProxy>
    getContractAt(
      name: 'INounsAuctionHouse',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INounsAuctionHouse>
    getContractAt(
      name: 'INounsDescriptor',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INounsDescriptor>
    getContractAt(
      name: 'INounsSeeder',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INounsSeeder>
    getContractAt(
      name: 'INounsToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INounsToken>
    getContractAt(
      name: 'IWETH',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>
    getContractAt(
      name: 'NounsAuctionHouse',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsAuctionHouse>
    getContractAt(
      name: 'NounsDescriptor',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDescriptor>
    getContractAt(
      name: 'NounsSeeder',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsSeeder>
    getContractAt(
      name: 'NounsToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsToken>
    getContractAt(
      name: 'NounsAuctionHouseProxy',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsAuctionHouseProxy>
    getContractAt(
      name: 'NounsAuctionHouseProxyAdmin',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsAuctionHouseProxyAdmin>
    getContractAt(
      name: 'MaliciousBidder',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MaliciousBidder>
    getContractAt(
      name: 'Administered',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Administered>
    getContractAt(
      name: 'NounsDAOExecutorHarness',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOExecutorHarness>
    getContractAt(
      name: 'NounsDAOExecutorTest',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOExecutorTest>
    getContractAt(
      name: 'NounsDAOImmutable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOImmutable>
    getContractAt(
      name: 'NounsDAOLogicV1Harness',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NounsDAOLogicV1Harness>
    getContractAt(
      name: 'WETH',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH>

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>
  }
}
